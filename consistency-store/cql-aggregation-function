//Create aggregate function for reading most up-to-date row tuple of (id, key, data, deps, txid, consistency)

val returnType = s"tuple<${cassandraTypeOf[Id]}, ${cassandraTypeOf[Key]}, ${cassandraTypeOf[Data]}, set<${cassandraTypeOf[Id]}>, ${cassandraTypeOf[Id]}, ${cassandraTypeOf[Consistency]}>"

session.execute(
    s"""CREATE OR REPLACE FUNCTION biggerRow(
         |  max $returnType,
         |  id ${cassandraTypeOf[Id]}, key ${cassandraTypeOf[Key]}, data ${cassandraTypeOf[Data]}, deps set<${cassandraTypeOf[Id]}>, txid ${cassandraTypeOf[Id]}, consistency ${cassandraTypeOf[Consistency]})
         |		CALLED ON NULL INPUT
         |		RETURNS $returnType
         |		LANGUAGE java
         |		AS '$maxFunctionDef';
 """.stripMargin)

session.execute(
    s"""CREATE OR REPLACE AGGREGATE maxRow($idType, $keyType, $dataType, set<$idType>, $idType, $consistencyLevelType)
         |SFUNC biggerRow
         |STYPE $returnType
         |INITCOND (null, null, null, null, null, null);
         |
 """.stripMargin
)


override val maxFunctionDef : String =
    s"""Integer maxid = max.get(0, Integer.class);
         |
         |  if (maxid == null || id > maxid) {
         |			max.setInt(0, id);
         |			max.setString(1, key);
         |			max.setString(2, data);
         |			max.setSet(3, deps, Integer.class);
         |			max.set(4, txid, Integer.class);
         |			max.setString(5, consistency);
         |			return max;
         |		} else {
         |			return max;
         |		}
     """.stripMargin



select maxRow(id, key, data, deps, txid, consistency) from t_data where key = 'x';