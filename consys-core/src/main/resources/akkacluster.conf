#####################################
# Consys Config File                #
#####################################


akka {

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "DEBUG"

  actor {
    provider = "cluster"

    warn-about-java-serializer-usage = false

    allow-java-serialization = on
  }

  coordinated-shutdown.run-by-actor-system-terminate = false

  remote {
    ### Configuration for Artery, the new implementation of remoting
    artery {

      # Enable the new remoting with this flag
      enabled = on

      # Select the underlying transport implementation.
      #
      # Possible values: aeron-udp, tcp, tls-tcp
      #
      # The Aeron (UDP) transport is a high performance transport and should be used for systems
      # that require high throughput and low latency. It is using more CPU than TCP when the
      # system is idle or at low message rates. There is no encryption for Aeron.
      # https://github.com/real-logic/aeron
      #
      # The TCP and TLS transport is implemented using Akka Streams TCP/TLS. This is the choice
      # when encryption is needed, but it can also be used with plain TCP without TLS. It's also
      # the obvious choice when UDP can't be used.
      # It has very good performance (high throughput and low latency) but latency at high throughput
      # might not be as good as the Aeron transport.
      # It is using less CPU than Aeron when the system is idle or at low message rates.
      transport = tcp

      ### !!! Hostname and port are set in Scala code !!! ###
      # Canonical address is the address other clients should connect to.
      # Artery transport will expect messages to this address.
      # canonical {

        # The default remote server port clients should connect to.
        # Default is 25520, use 0 if you want a random available port
        # This port needs to be unique for each actor system on the same machine.
        # port = 25520

        # Hostname clients should connect to. Can be set to an ip, hostname
        # or one of the following special values:
        #   "<getHostAddress>"   InetAddress.getLocalHost.getHostAddress
        #   "<getHostName>"      InetAddress.getLocalHost.getHostName
        #
        # hostname = "<getHostAddress>"
      # }

      advanced {
        # Timeout of establishing outbound connections.
        # Only used when transport is tcp or tls-tcp.
        connection-timeout = 120 seconds

        # Max number of restarts within 'inbound-restart-timeout' for the inbound streams.
        # If more restarts occurs the ActorSystem will be terminated.
        inbound-max-restarts = 40

        # Retry outbound connection after this backoff.
        # Only used when transport is tcp or tls-tcp.
        outbound-restart-backoff = 2 second

        # See 'outbound-max-restarts'
        outbound-restart-timeout = 90 seconds

        # Max number of restarts within 'outbound-restart-timeout' for the outbound streams.
        # If more restarts occurs the ActorSystem will be terminated.
        outbound-max-restarts = 40

        # The timeout for outbound associations to perform the initial handshake.
        # This timeout must be greater than the 'image-liveness-timeout' when
        # transport is aeron-udp.
        handshake-timeout = 90 seconds
      }
    }
  }


  cluster {
      # seed-nodes are set in the code!
      # seed-nodes = [
      #  "akka://ClusterSystem@127.0.0.1:2551",
      #  "akka://ClusterSystem@127.0.0.1:2552"
      #  ]

      downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
  }


  stdout-loglevel = "DEBUG"

}


# Actors need to always be pinned to one thread
request-dispatcher {
  executor = "thread-pool-executor"
  type = PinnedDispatcher

  thread-pool-executor {
    # Keep alive time for threads
    keep-alive-time = 600s
  }
}


datastax-java-driver {
  # Execution profiles for CQL queries
  profiles {
    # Profile used to initialize Cassandra
    consys_init {
      basic.request.timeout = 30 seconds
    }
  }
}